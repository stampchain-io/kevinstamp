import nodemailer from 'nodemailer';
import type { KevinInquiry } from '@shared/schema';

// Email configuration - can be moved to environment variables for production
const EMAIL_CONFIG = {
  host: process.env.SMTP_HOST || 'smtp.gmail.com',
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.SMTP_USER || 'your-email@gmail.com',
    pass: process.env.SMTP_PASS || 'your-app-password'
  },
  // Additional options for Gmail
  service: process.env.SMTP_SERVICE || 'gmail'
};

// Create transporter
const createTransporter = () => {
  return nodemailer.createTransporter({
    ...EMAIL_CONFIG,
    // Debug logging in development
    debug: process.env.NODE_ENV === 'development',
    logger: process.env.NODE_ENV === 'development'
  });
};

// Email templates
const createInquiryEmailHtml = (inquiry: KevinInquiry): string => {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <style>
        body { font-family: 'Courier New', monospace; background: #000; color: #fff; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(45deg, #ff6b35, #8b5cf6); padding: 20px; border-radius: 10px; margin-bottom: 20px; }
        .content { background: #1a1a1a; padding: 20px; border: 2px solid #ff6b35; border-radius: 10px; }
        .field { margin-bottom: 15px; }
        .label { color: #ff6b35; font-weight: bold; font-family: 'Courier New', monospace; }
        .value { background: #2a2a2a; padding: 10px; border-radius: 5px; margin-top: 5px; }
        .footer { margin-top: 20px; padding-top: 20px; border-top: 1px solid #333; color: #666; }
        .terminal { font-family: 'Courier New', monospace; background: #000; color: #00ff41; padding: 10px; border-radius: 5px; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1 style="margin: 0; color: white; font-family: 'Courier New', monospace;">🎯 NEW KEVIN STAMP INQUIRY</h1>
          <p style="margin: 5px 0 0 0; color: white; opacity: 0.9;">Exclusive Collector Interest</p>
        </div>

        <div class="content">
          <div class="terminal">
            <div>&gt; KEVIN_STAMP_INQUIRY.EXE</div>
            <div>&gt; Processing inquiry from ${inquiry.name}</div>
            <div>&gt; Timestamp: ${inquiry.createdAt.toISOString()}</div>
          </div>

          <div class="field">
            <div class="label">👤 NAME:</div>
            <div class="value">${inquiry.name}</div>
          </div>

          <div class="field">
            <div class="label">📧 EMAIL:</div>
            <div class="value">${inquiry.email}</div>
          </div>

          <div class="field">
            <div class="label">🎯 BUDGET RANGE:</div>
            <div class="value">${inquiry.budgetRange} BTC</div>
          </div>

          <div class="field">
            <div class="label">💬 MOTIVATION:</div>
            <div class="value" style="white-space: pre-wrap;">${inquiry.motivation}</div>
          </div>
        </div>

        <div class="footer">
          <p><strong>⚠️ ACTION REQUIRED:</strong> This inquiry needs personal review within 48-72 hours.</p>
          <p><strong>💡 REMINDER:</strong> Kevin stamps are exclusive collectibles, not publicly traded commodities.</p>
          <p style="margin-top: 15px; font-size: 12px;">
            Generated by Kevin Stamp Website<br>
            Feature, not a bug. 🐛
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
};

const createInquiryEmailText = (inquiry: KevinInquiry): string => {
  return `
🎯 NEW KEVIN STAMP INQUIRY
==========================

> KEVIN_STAMP_INQUIRY.EXE
> Processing inquiry from ${inquiry.name}
> Timestamp: ${inquiry.createdAt.toISOString()}

👤 NAME: ${inquiry.name}
📧 EMAIL: ${inquiry.email}
🎯 BUDGET RANGE: ${inquiry.budgetRange} BTC

💬 MOTIVATION:
${inquiry.motivation}

⚠️ ACTION REQUIRED: This inquiry needs personal review within 48-72 hours.
💡 REMINDER: Kevin stamps are exclusive collectibles, not publicly traded commodities.

Generated by Kevin Stamp Website
Feature, not a bug. 🐛
  `;
};

// Send inquiry email
export const sendInquiryEmail = async (inquiry: KevinInquiry): Promise<boolean> => {
  try {
    const transporter = createTransporter();

    // Verify connection configuration
    await transporter.verify();

    const mailOptions = {
      from: `"Kevin Stamp Website" <${EMAIL_CONFIG.auth.user}>`,
      to: 'enquiries@stampchain.io',
      subject: `🎯 NEW KEVIN STAMP INQUIRY - ${inquiry.name} (${inquiry.budgetRange} BTC)`,
      text: createInquiryEmailText(inquiry),
      html: createInquiryEmailHtml(inquiry),
      // Add reply-to for easy response
      replyTo: inquiry.email,
      // Priority for high-value inquiries
      priority: inquiry.budgetRange === '10+' ? 'high' : 'normal',
      headers: {
        'X-Kevin-Inquiry-ID': inquiry.id,
        'X-Budget-Range': inquiry.budgetRange,
        'X-Source': 'kevin-stamp-website'
      }
    };

    const info = await transporter.sendMail(mailOptions);

    console.log('✅ Email sent successfully:', {
      messageId: info.messageId,
      inquiryId: inquiry.id,
      recipient: 'enquiries@stampchain.io',
      budgetRange: inquiry.budgetRange
    });

    return true;
  } catch (error) {
    console.error('❌ Failed to send inquiry email:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      inquiryId: inquiry.id,
      recipient: 'enquiries@stampchain.io'
    });

    // Don't throw - we don't want email failures to break the form submission
    return false;
  }
};

// Test email function for development
export const testEmailConnection = async (): Promise<boolean> => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('✅ Email service connection verified');
    return true;
  } catch (error) {
    console.error('❌ Email service connection failed:', error);
    return false;
  }
};

export default {
  sendInquiryEmail,
  testEmailConnection
};
