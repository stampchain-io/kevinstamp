gotcha‚ÄîReplit, not Rzepa. üí™
Below is a ‚Äúpaste-once and run‚Äù mega-prompt you can drop into Replit‚Äôs AI/‚ÄúCreate from prompt‚Äù to scaffold a production-ready site for The Kevin Saga. I‚Äôve packed it with structure, styling, content slots, and polish so it nails the meme and is easy to extend.

‚∏ª

üîß Replit one-shot build prompt

Create a new public repo called kevin-saga using Next.js 14 (App Router) + TypeScript + Tailwind + shadcn/ui + Framer Motion.
Design goal: classy meme energy‚Äî‚Äúghost in the machine‚Äù meets Bitcoin orange.

Brand & vibe
	‚Ä¢	Palette (tailwind theme):
	‚Ä¢	kevin.orange #F7931A (Bitcoin orange)
	‚Ä¢	kevin.charcoal #0B0F13
	‚Ä¢	kevin.graphite #2B2F36
	‚Ä¢	kevin.steel #6B7280
	‚Ä¢	kevin.mint #2FA84F (Kevin eye green)
	‚Ä¢	kevin.sand #C58E73 (accent)
	‚Ä¢	Typography: Space Grotesk for headings, Inter for body (via next/font).
	‚Ä¢	Effects: subtle scanline/noise background, gentle glitch on hover for CTAs, ‚Äúghost in the machine‚Äù shader on hero image, and Framer Motion fades.

Pages & routing (App Router)
	‚Ä¢	/ (Home): hero, ‚ÄúKevin is a feature not a bug‚Äù strapline, quick lore, CTA buttons (Read Lore, Trade KEVIN).
	‚Ä¢	/lore (The Kevin Saga): render markdown from content/lore.mdx (use the user text below). Include timeline blocks and callouts.
	‚Ä¢	/token (KEVIN Token): live stats section (reads from /api/token with env fallback), price & holders, mini-chart (client-only, recharts), recent trades table from content/trades.json until an API is wired.
	‚Ä¢	/gallery:
	‚Ä¢	‚Äú91 Kevin Stamps‚Äù grid from content/stamps.json with lightbox.
	‚Ä¢	‚ÄúCommunity Stamps‚Äù and ‚ÄúMemes‚Äù grids from content/community.json.
	‚Ä¢	/media (Embeds): YouTube placeholder for EXIT VALLEY CRYPTO + press mentions list.
	‚Ä¢	System pages: /privacy, /terms, custom /404.

Data & content
	‚Ä¢	All copy in /content/*.mdx and simple JSON in /content/*.json.
	‚Ä¢	Provide seed files:
	‚Ä¢	content/lore.mdx ‚Üí paste the user-provided story (see ‚ÄúSeed content‚Äù below).
	‚Ä¢	content/token.json ‚Üí { supply, protocol, status, marketCapBTC, change24h, vol24h, totalVol, holders }.
	‚Ä¢	content/trades.json ‚Üí sample objects { time, from, to, amount, priceSats, btcValue, usdValue }.
	‚Ä¢	content/stamps.json ‚Üí array of { id, number, image, hash } with 2‚Äì3 samples; more can be added later.
	‚Ä¢	Add an .env.example with:
	‚Ä¢	OPENSTAMP_MARKET_ENDPOINT=https://openstamp.io/api/... (placeholder)
	‚Ä¢	TOKEN_TICKER=KEVIN

API layer
	‚Ä¢	app/api/token/route.ts: server endpoint. If OPENSTAMP_MARKET_ENDPOINT is set, fetch live stats; else read content/token.json. Return normalized fields { priceSats, marketCapBTC, holders, volume24h, change24h }.
	‚Ä¢	app/api/trades/route.ts: same pattern, falling back to content/trades.json.

Components (in /components)
	‚Ä¢	NavBar, SiteFooter
	‚Ä¢	Hero with Kevin image, glitch text, CTAs (Trade on OpenStamp, Read Lore).
	‚Ä¢	StatCard, StatsRow
	‚Ä¢	TradesTable (sortable, sticky header)
	‚Ä¢	MiniChart (recharts, client-only)
	‚Ä¢	LightboxGallery
	‚Ä¢	Section (title/eyebrow wrapper)
	‚Ä¢	KevinGlitch (small utility to glitch any child)
	‚Ä¢	Prose (mdx styles)
	‚Ä¢	BadgeNote (‚ÄúFeature not a bug‚Äù pill)

Styling & theme
	‚Ä¢	Configure Tailwind with a custom kevin color scale (see palette).
	‚Ä¢	Add a global subtle noise/scanline background using CSS.
	‚Ä¢	Dark mode default (charcoal/graphite) with orange accents; light mode toggle included (shadcn ThemeToggle).

Accessibility & SEO
	‚Ä¢	next-seo with defaults (title, description, canonical).
	‚Ä¢	OG/Twitter images (placeholder in /public/og.png and /public/twitter.png).
	‚Ä¢	Semantic landmarks, focus rings, prefers-reduced-motion respect, alt text for all images.
	‚Ä¢	Generate robots.txt and sitemap.xml.

DX & quality
	‚Ä¢	ESLint + Prettier configured.
	‚Ä¢	README.md with quick start, content editing instructions, and where to swap in real APIs.
	‚Ä¢	Vercel-ready vercel.json, but also works on Replit web server.
	‚Ä¢	Scripts: "dev", "build", "start", "lint".

Home layout (wire)
	‚Ä¢	Hero left: headline ‚ÄúKevin is a feature, not a bug.‚Äù subcopy; CTAs.
	‚Ä¢	Hero right: public/assets/kevin_hero.png with ghost shader.
	‚Ä¢	Below: three StatCards (Price, Market Cap, Holders) fed by /api/token.
	‚Ä¢	‚ÄúOrigins‚Äù teaser with link to /lore.
	‚Ä¢	‚ÄúThe 91 Kevin Stamps‚Äù teaser grid linking to /gallery.
	‚Ä¢	Footer with legal: ‚ÄúNot investment advice.‚Äù & social links.

Token page specifics
	‚Ä¢	Pull from /api/token. If no API, show fallback from content/token.json with a banner: ‚ÄúSample data mode‚Äù.
	‚Ä¢	MiniChart: render mock series from content/trades.json (price over time).
	‚Ä¢	Button: ‚ÄúTrade KEVIN on OpenStamp‚Äù linking to https://openstamp.io/market/src20/trading?ticker=KEVIN.

Assets
	‚Ä¢	Create /public/assets/ and include placeholders:
	‚Ä¢	kevin_hero.png
	‚Ä¢	kevin_avatar.png
	‚Ä¢	logo.svg (simple K monogram in orange).
	‚Ä¢	I will upload final art later via Replit; keep filenames stable.

Legal & extras
	‚Ä¢	Add /terms and /privacy boilerplates.
	‚Ä¢	Cookie-less analytics slot: simple page-view counter stub (lib/analytics.ts) I can swap later.
	‚Ä¢	Email capture stub (static form to /api/subscribe writing to a local JSON until I replace).
	‚Ä¢	PWA optional: add manifest + icons and basic service worker.

Implement now
	1.	Scaffold project with the above.
	2.	Add the following seed content and JSON verbatim:

content/lore.mdx

# The Kevin Saga

## Origins: The Birth of Bitcoin Art
[PASTE USER TEXT HERE, keep headings, lists, and bold exactly as given.]

## The Kevin Stamp Meme: A Ghost in the Machine
[PASTE USER TEXT HERE.]

## KEVIN The SRC-20 Token
[PASTE USER TEXT HERE.]

## Token Information
[PASTE USER TEXT HERE.]

## The Future: Kevin Goes Mainstream
[PASTE USER TEXT HERE.]

## Gallery
[Use links to /gallery.]

## Kevin in the Media
[Link to /media.]

content/token.json

{
  "supply": 690000000,
  "protocol": "SRC-20 on Bitcoin Stamps",
  "status": "First SRC-20 token ever deployed",
  "marketCapBTC": 17.802,
  "change24h": -2.64,
  "vol24h": 0,
  "totalVolBTC": 269.22,
  "holders": 2130,
  "note": "Replace with live API via OPENSTAMP_MARKET_ENDPOINT when available."
}

content/trades.json

[
  {
    "time": "2025-08-08T12:28:00Z",
    "from": "bc1q33...zcmrru",
    "to": "bc1qnq...skgfmw",
    "amount": 35000,
    "priceSats": 2.65,
    "btcValue": 0.0009,
    "usdValue": 109.61
  },
  {
    "time": "2025-08-08T11:16:00Z",
    "from": "bc1q33...zcmrru",
    "to": "bc1qrk...5chgt4",
    "amount": 40000,
    "priceSats": 2.5,
    "btcValue": 0.001,
    "usdValue": 118.18
  }
]

content/stamps.json

{
  "series": "Kevin Stamps",
  "range": {"start": 4258, "end": 18430},
  "count": 91,
  "items": [
    { "number": 4258, "image": "/assets/kevin_hero.png", "hash": "sha256-PLACEHOLDER" },
    { "number": 18430, "image": "/assets/kevin_hero.png", "hash": "sha256-PLACEHOLDER" }
  ]
}

tailwind.config.ts (extend colors)

extend: {
  colors: {
    kevin: {
      orange: "#F7931A",
      charcoal: "#0B0F13",
      graphite: "#2B2F36",
      steel: "#6B7280",
      mint: "#2FA84F",
      sand: "#C58E73"
    }
  }
}

	3.	In README.md, include:

	‚Ä¢	Replit run instructions (npm i && npm run dev), how to replace images (/public/assets/kevin_hero.png etc.), how to wire a real endpoint via OPENSTAMP_MARKET_ENDPOINT, and content editing tips.

	4.	Deliver a clean, running site with placeholder images and seed text.

End of prompt. Build it now.

‚∏ª

What you might have missed (I covered these in the prompt)
	‚Ä¢	Dark + light mode, accessibility, and reduced-motion.
	‚Ä¢	SEO (OpenGraph/Twitter), sitemap/robots.
	‚Ä¢	Legal copy (not investment advice), Terms/Privacy.
	‚Ä¢	Simple analytics & email capture stubs.
	‚Ä¢	API fallbacks so it works without live data.
	‚Ä¢	Gallery lightbox + content JSON schemas for easy updates.
	‚Ä¢	PWA option for home-screen icon (optional but scaffolded).

If you want, I can also ship a full starter repo here with the components already written and you just drag it into Replit.